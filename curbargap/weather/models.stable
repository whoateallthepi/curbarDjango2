from django.db import models
from django.utils import timezone
from django.core.validators import MaxValueValidator, MinValueValidator
from django.urls import reverse

#import time
#import datetime

# Create your models here.
# Weather Station
class Station(models.Model):
   name = models.CharField('Station Name', max_length=20)
   latitude = models.DecimalField('Station Latitude', max_digits=9, decimal_places=6)
   longitude = models.DecimalField('Station Latitude', max_digits=9, decimal_places=6)
   altitude = models.IntegerField('Station Altitude')
   type = models.CharField('Station Type', max_length=3)
   RFid = models.CharField('Station RFid', max_length=2)
   phone = models.IntegerField('Station Phone')

   def __str__(self):
        return self.name

   def get_absolute_url(self):
       return reverse ('weather:station_detail',
                       args=[self.id])     

#Readings
class Reading(models.Model):
   reading_time = models.DateTimeField('Reading Time')
   station = models.ForeignKey(Station,on_delete=models.CASCADE)
   wind_dir = models.IntegerField('Wind Direction', validators=[MaxValueValidator(360), MinValueValidator(0)])
   wind_speed = models.DecimalField('Wind Speed', max_digits=4, decimal_places=1)
   wind_gust = models.DecimalField('Wind Gust', max_digits=4, decimal_places=1)
   wind_gust_dir = models.IntegerField('Wind Direction', validators=[MaxValueValidator(360), MinValueValidator(0)])
   wind_speed_avg2m = models.DecimalField('Wind Speed 2m Average', max_digits=4, decimal_places=1)
   wind_dir_avg2m = models.IntegerField('Wind Direction 2m Average', validators=[MaxValueValidator(360), MinValueValidator(0)], default=0)
   wind_gust_10m = models.DecimalField('Wind Gust 10 minutes', max_digits=4, decimal_places=1)
   wind_gust_dir_10m = models.IntegerField('Wind Gust Direction 10m', validators=[MaxValueValidator(360), MinValueValidator(0)])
   humidity = models.DecimalField('Relative Humidity', max_digits=4, decimal_places=1)
   temperature = models.DecimalField('Temperature Centigrade', max_digits=3, decimal_places=1)
   rain_1h = models.DecimalField('Rain Past Hour', max_digits=6, decimal_places=2)
   rain_today = models.DecimalField('Rain Today', max_digits=6, decimal_places=2)
   rain_since_last = models.DecimalField('Rain Since Last Reading', max_digits=6, decimal_places=2)
   bar_uncorrected = models.FloatField('Uncorrected pressure')
   bar_corrected =  models.DecimalField('Barometer (corrected)', max_digits=5, decimal_places=1)
   battery = battery= models.DecimalField('Battery', max_digits=4, decimal_places=2, default=0, blank=True, null=True)
   light = models.DecimalField('Battery', max_digits=4, decimal_places=2, default=0, blank=True, null=True)
   
   def get_absolute_url(self):
       return reverse ('weather:reading_detail',
                       args=[self.id])

   
   def summary (self): 
      def rose(degrees):
      # Utility to convert degrees to a human direction - probably needs to be elsewhere
         quadrants = ["N",
                     "NNE",
                     "NE",
                     "ENE",
                     "E",
                     "ESE",
                     "SE",
                     "SSE",
                     "S",
                      "SSW",
                      "SW",
                      "WSW",
                      "W",
                      "WNW",
                      "NW",
                      "NNW",
                     "N"
                   ]

         big_degrees = 371.25  + degrees
         quadrant = int(big_degrees/22.5)

         #force into range 0-15, with 0 = N 
         if quadrant >= 16:
           quadrant -= 16

         return quadrants[quadrant]
      # end of rose   
      
      if self.wind_speed > 0:
         wind_rose = rose(self.wind_dir)
      else:
         wind_rose = 'Calm'
      
      return (' Weather at ' + self.reading_time.strftime("%H:%M:%S on %d %b %Y") +       
               ': Temp:{t:-0.1f}C'.format(t=self.temperature) +
               ', RH:{hd:0.0f}%'.format(hd=self.humidity) + 
               ', Wind:{wd:0.0f}km/h'.format(wd=self.wind_speed)+ 
               ' from ' + wind_rose +
               ', Bar:{p:0.0f}mb'.format(p=self.bar_corrected) +
               ', Rain today:{rt:0.1f}mm'.format(rt=self.rain_today) +
               ', Rain last hr:{rh:0.1f}mm'.format(rh=self.rain_1h) 
      )                       